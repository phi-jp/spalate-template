modal-auth(spat-animation='bottom')
  div.s-full.f.flex-column.bg-white.relative(ref='modal')
    div.container.p64(ref='main')
      h2.text-center.fs16.mb64 続けるにはアカウントが必要です

      div.sns.f.fh.mb16
        div(each='{sns in snsList}')
          div.s50.circle.mx8.f.fh(class='bg-{sns.id}', onclick='{authBySNS}')
            img(src='/static/images/sns/{sns.id}.svg')

      div.f.fh.mb32
        div.w-full.h1.bg-gray
        div.mx16 or
        div.w-full.h1.bg-gray

      //- sign up
      form(if='{mode === "signup"}', ref='formSignUp', onsubmit='{signUpByEmail}')
        div.mb16
          input.border-bottom.w-full.px2.py8.mb16(ref='email', type='email', placeholder='メールアドレス')
          input.border-bottom.w-full.px2.py8.mb16(ref='password', type='password', placeholder='パスワード')
          button.button.primary.w-full.py14 アカウント登録

        div.mb32
          p.fs12 登録することで、あなたは
            span.text-link.cursor-pointer(onclick='{openTerms}') 利用規約
            | に同意し、
            span.text-link.cursor-pointer(onclick='{openPolicy}') プライバシーポリシー
            | を熟読して理解したものとみなされます。
        div.text-center
          button.text-link.bold(type='button', onclick='{toggleAuth}') ログインはこちら
      //- sign in
      form(if='{mode === "signin"}', ref='formSignIn', onsubmit='{signInByEmail}')
        div.mb32
          input.border-bottom.w-full.px2.py8.mb16(ref='email', type='email', placeholder='メールアドレス')
          input.border-bottom.w-full.px2.py8.mb16(ref='password', type='password', placeholder='パスワード')
          button.button.primary.w-full.py14 ログインする
        div.text-center
          button.text-link.bold(type='button', onclick='{toggleAuth}') 登録はこちら

    //- 右上のバツボタン
    div.absolute.p16.t0.r0.cursor-pointer(onclick='{close}')
      i.material-icons close
  
  style(type='less').
    :scope {
      display: block;
    }

  script.
    this.mode = 'signup';

    this.snsList = [
      { id: 'twitter', provider: 'twitter.com' },
      { id: 'facebook', provider: 'facebook.com' },
      { id: 'google', provider: 'google.com' },
    ];

    this.on('mount', () => {
      $(this.refs.formSignIn).hide();
    });

    this.authBySNS = async (e) => {
      e.preventDefault();

      var i = spat.modal.indicator();

      try {
        var res = await flarebase.auth.linkWithPopup(e.item.sns.provider);
        this.trigger('authed', res);
      }
      catch (error) {
        if (error.code === 'auth/credential-already-in-use') {
          // 他のアカウントに紐付いていた場合, そっちでログインし直す
          var res = await flarebase.auth.signInWithCredential(error.credential);
          this.trigger('authed', res);
        }
        else {
          spat.modal.alert(error.error_message);
        }
      }
      finally {
        i.close();
      }
    };

    this.signUpByEmail = async (e) => {
      e.preventDefault();

      var i = spat.modal.indicator();

      try {
        var res = await flarebase.auth.createUserWithEmailAndPassword(this.refs.email.value, this.refs.password.value);
        this.trigger('authed', res);
      }
      catch(error) {
        spat.modal.alert(error.error_message);
      }
      finally {
        i.close();
      }
    };

    this.signInByEmail = async (e) => {
      e.preventDefault();

      var i = spat.modal.indicator();

      try {
        var res = await flarebase.auth.signInWithEmailAndPassword(this.refs.email.value, this.refs.password.value);
        this.trigger('authed', res);
      }
      catch(error) {
        spat.modal.alert(error.error_message);
      }
      finally {
        i.close();
      }
    };

    this.toggleAuth = (e) => {
      var main = this.refs.main;
      var prev = null;
      var next = null;

      if (this.mode == 'signup') {
        this.mode = 'signin';
        prev = this.refs.formSignUp;
        next = this.refs.formSignIn;
      }
      else {
        this.mode = 'signup';
        prev = this.refs.formSignIn;
        next = this.refs.formSignUp;
      }
      
      $(main).fadeOut(256, () => {
        $(prev).hide();
        $(next).show();
        $(main).fadeIn(256);
        this.update();
      });

      e.preventUpdate = true;
    };

    this.openTerms = () => {
      spat.modal.open('modal-markdown', {filename: '/static/markdowns/terms.md'})
    };

    this.openPolicy = () => {
      spat.modal.open('modal-markdown', {filename: '/static/markdowns/policy.md'})
    };
