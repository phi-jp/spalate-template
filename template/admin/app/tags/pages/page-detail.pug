page-detail
  form(onsubmit='{submit}')
    div.mb20
      div.bg-white.h50.border-bottom.f.fm.flex-between.px30
        a.cursor-pointer(onclick='spat.nav.back()') < 戻る
        div(if='{schema.editable !== false}')
          button.button.danger.mr8(type='button', onclick='{del}', if='{location.pathname !== "/me"}') 削除する
          button.button(type='submit') 保存する
    div.p30(if='{item}')
      div.row.bg-white.p32
        div(each='{section in schema.edit}' class='{section.class}')
          div.row
            div(each='{option in section.items}', class='{option.class}')
              div.p16(ref='{option.key}', data-is='atom-input-{option.type}', option='{option}', _id='{admin.method.id(item, option)}', _value='{admin.method.value(item, option)}')

  style(scoped, type='less').
    :scope {
      input, textarea {
        background-color: #F5F7FA !important;
      }
    }

  script.
    this.on('show', async (e) => {
      this.schema = admin.schemas[e.opts.page];

      this.item = await admin.method.get(this.schema, {
        id: e.opts.id,
      });

      this.update();
    });

    this.submit = async (e) => {
      e.preventDefault();

      var item = {};

      var options = _.flatten(this.schema.edit.map(section => section.items));

      var promises = options.map(async (option) => {
        var ref = this.refs[option.key];
        if (!ref) return ;

        var value = await admin.method.output(ref.getValue(), option)

        item.$set(option.key, value);
      });

      await Promise.all(promises);
 
      admin.method.set(this.schema, {
        id: this.item.id,
      }, item);

      spat.toast.message('saved');
    };
