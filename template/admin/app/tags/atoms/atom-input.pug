// テキスト
atom-input-text
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    input.input.w-full(ref='v', type='{opts.item.input_type || "text"}', placeholder='{opts.item.placeholder}', value='{opts._value}', required='{opts.item.required}', readonly='{opts.item.readonly}')

  script.
    this.on('mount', () => {
    });
    this.getValue = () => {
      return this.refs.v.value;
    };

// 数字
atom-input-number
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    input.input.w-full(ref='v', type='number', placeholder='{opts.item.placeholder}', value='{opts._value}', pattern='{opts.option.pattern || "\\\\d"}', required='{opts.item.required}', readonly='{opts.item.readonly}')

  script.
    this.on('mount', () => {
    });
    this.getValue = () => {
      return +this.refs.v.value;
    };

// 複数行テキスト
atom-input-multitext
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    textarea.input.w-full.mb8(ref='v', rows='8') {opts._value}
    //- div.f.fm.fs10.text-weak
    //-   span 文字数：
    //-   span {getWordCount()}
  script.
    this.getValue = () => {
      return this.refs.v.value;
    };

// セレクトメニュー
atom-input-select
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    select.select.border.w-full(ref='select')
      option(each='{option in opts.option.options}', value='{option.value}', selected='{option.value === parent.opts._value}') {option.label}
  script.
    this.on('mount', () => {
    });
    this.getValue = () => {
      return this.refs.select.value;
    };

atom-input-image
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    div(onclick='{click}')
      img(src='{url}')
  
  script.
    this.on('mount', () => {
      this.url = this.opts._value || 'https://dummyimage.com/600x400/000/fff';
      this.update();

      var input = document.createElement('input');
      input.type = 'file';
      input.setAttribute('accept', 'image/*');
      input.onchange = async (e) => {
        var f = e.target.files[0];
        if (!f) return ;

        var base64 = await this.fileToBase64(f);
        this.url = base64;
        this.update();
      };

      this.imageInput = input;
    });

    this.click = () => {
      this.imageInput.click();
    };

    this.upload = async (file) => {
      this.url = await admin.method.upload(file);
      this.update();
    };

    this.getValue = () => {
      return this.url;
    };

    this.fileToBase64 = (file) => {
      return new Promise((resolve) => {
        var fr = new FileReader();
        fr.onload = (e) => {
          resolve(e.target.result);
        };

        fr.readAsDataURL(file);
      })
    };

atom-input-multiform
  div.fs12.text-gray.mb8 {opts.option.label}
  div
    div.f.fm.mb8.cursor-pointer(each='{item, index in items}', onclick='{editItem}')
      div.mr4 {index}. 
      div.border.p8
        p(each='{form, i in opts.option.forms}') 
          span {opts.option.forms[i].label}: {item[form.key]}
          br
    div(onclick='{createItem}')
      button.button.primary(type='button') 追加

  script.
    var self = this;

    this.on('mount', () => {
      this.key = opts.option.key;
      this.items = opts._value || [];
      this.update();
    });

    this.createItem = (e) => {
      // モーダルを開く
      var modal = spat.modal.open('modal-edit', {
        label: self.opts.option.label, // ラベル
        forms: self.opts.option.forms, // 生成したいフォームを渡す（schemaと同じ）
        readonly: self.opts.option.readonly,
      });

      modal.on('submit', (e) => {
        var item = e.item;
        this.items.push(item);

        this.update();
      });
    };

    this.editItem = (e) => {
      var item = e.item.item;
      var index = e.item.index;
      var item_id = this.items[index].id;

      // モーダルを作成
      var modal = spat.modal.open('modal-edit', {
        label: self.opts.option.label, // ラベル
        forms: self.opts.option.forms, // 生成したいフォームを渡す（schemaと同じ）
        item: item, // 編集したい場合は ここにメニューを渡す
      });

      // 更新
      modal.on('submit', (event) => {
        var item = event.item;
        this.items[index] = item;

        this.update();
      });
      
      // 削除
      modal.on('del', (event) => {
        this.items.splice(index, 1);
      });
    };

atom-input-select-collection
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    div.f.fm.row
      div.fs12.border.rounded-4.p8.mr4.mb4(each='{item in items}') {item.$get(parent.opts.option.options.key)}
      button.button(onclick='{edit}') 編集
  script.
    this.on('mount', async () => {
      await this.syncItems();
    });

    this.syncItems = async () => {
      if (!this.opts._value) {
        this.items = [];
        return ;
      }

      // id からデータ化
      var value = this.opts._value;
      if (!Array.isArray(value)) {
        value = [value];
      }
      var promises = value.map(id => {
        return admin.method.get(opts.option.options.collection, {
          id: id,
        });
      });
      this.items = await Promise.all(promises);
      this.update();
    };

    this.edit = (e) => {
      if (e) e.preventDefault();

      var modal = spat.modal.open('modal-select-collection', {
        label: '選択',
        path: opts.option.options.collection,
        key: opts.option.options.key,
        multiple: opts.option.multiple,
        items: this.items,
      });

      modal.on('submit', ({items}) => {
        this.items = items;
        this.update();
      });
    };

    this.getValue = () => {
      if (this.opts.option.multiple) {
        return this.items.map(i => i.id);
      }
      else {
        return this.items[0].id;
      }
    };

atom-input-table
  label
    div.fs12.text-gray.mb8 {opts.option.label}
  div.f.flex-right
    div(if='{opts.item.editable !== false}')
      a.button(href='/{opts.item.api}/new?id={opts.data.id}') 新規作成
  div
    div.f.fr.mb16(if='{schema.editable !== false}')
      a.button.primary.shadow(href='{location.pathname.replace(/\\/$/g, "")}/{schema.collection}/new') + 新規作成
    module-table(schema='{schema}', headers='{schema.show}', items='{opts._value}', is_detail='{true}')
  script.

    this.on('mount', () => {
      this.schema = admin.schemas[opts.option.key.replace(/.*\./, '')];
      this.update();
    });
