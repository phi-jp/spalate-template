// テキスト
atom-input-text
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    input.input.w-full(ref='v', type='{opts.option.input_type || "text"}', placeholder='{opts.option.placeholder}', value='{opts._value}', required='{opts.option.required}', readonly='{opts.option.readonly}')

  script.
    this.on('mount', () => {
    });
    this.getValue = () => {
      return this.refs.v.value;
    };

// 数字
atom-input-number
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    input.input.w-full(ref='v', type='number', placeholder='{opts.option.placeholder}', value='{opts._value}', pattern='{opts.option.pattern || "\\\\d"}', required='{opts.option.required}', readonly='{opts.option.readonly}')

  script.
    this.on('mount', () => {
    });
    this.getValue = () => {
      return +this.refs.v.value;
    };

// 複数行テキスト
atom-input-multitext
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    textarea.input.w-full.mb8(ref='v', rows='8') {opts._value}
    //- div.f.fm.fs10.text-weak
    //-   span 文字数：
    //-   span {getWordCount()}
  script.
    this.getValue = () => {
      return this.refs.v.value;
    };

// セレクトメニュー
atom-input-select
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    select.select.border.w-full(ref='select')
      option(value='', hidden) 未選択
      option(each='{o in options}', value='{o.value}', selected='{o.value === parent.opts._value}') {o.label}
  script.
    this.on('mount', async () => {
      
      if (Array.isArray(this.opts.option.options)) {
        this.options = this.opts.option.options;
      }
      else {

        var options = this.opts.option.options;
        var res = await admin.method.list([options.collection_key], {query: QuerySearch.parse('')})

        var items = res.items || res[options.collection_key];
        var label_key = options.label_key;
        var value_key = options.value_key;

        // mapping
        this.options = items.map(item => ({label: item.$get(label_key), value: item.$get(value_key)}));
    
        this.update();
      }
    });

    this.getValue = () => {
      return this.refs.select.value;
    };

atom-input-image
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    div(onclick='{click}')
      img(src="{url || this.opts._value || 'https://dummyimage.com/600x400/000/fff'}")
  
  script.
    this.on('mount', () => {
      this.url = null;
      this.update();

      var input = document.createElement('input');
      input.type = 'file';
      input.setAttribute('accept', 'image/*');
      input.onchange = async (e) => {
        var f = e.target.files[0];
        if (!f) return ;

        var base64 = await this.fileToBase64(f);
        this.url = base64;
        this.update();
      };

      this.imageInput = input;
    });

    this.click = () => {
      this.imageInput.click();
    };

    this.upload = async (file) => {
      this.url = await admin.method.upload(file);
      this.update();
    };

    this.getValue = () => {
      return this.url || this.opts._value || 'https://dummyimage.com/600x400/000/fff';
    };

    this.fileToBase64 = (file) => {
      return new Promise((resolve) => {
        var fr = new FileReader();
        fr.onload = (e) => {
          resolve(e.target.result);
        };

        fr.readAsDataURL(file);
      })
    };

atom-input-multiform
  div.fs12.text-gray.mb8 {opts.option.label}
  div
    div.f.fm.mb8.cursor-pointer(each='{item, index in items}', onclick='{editItem}')
      div.mr4 {index}. 
      div.border.p8
        p(each='{form, i in opts.option.forms}') 
          span {opts.option.forms[i].label}: {item[form.key]}
          br
    div(onclick='{createItem}')
      button.button.primary(type='button') 追加

  script.
    var self = this;

    this.on('mount', () => {
      this.key = opts.option.key;
      this.items = opts._value || [];
      this.update();
    });

    this.createItem = (e) => {
      // モーダルを開く
      var modal = spat.modal.open('modal-edit', {
        label: self.opts.option.label, // ラベル
        forms: self.opts.option.forms, // 生成したいフォームを渡す（schemaと同じ）
        readonly: self.opts.option.readonly,
      });

      modal.on('submit', (e) => {
        var item = e.item;
        this.items.push(item);

        this.update();
      });
    };

    this.editItem = (e) => {
      var item = e.item.item;
      var index = e.item.index;
      var item_id = this.items[index].id;

      // モーダルを作成
      var modal = spat.modal.open('modal-edit', {
        label: self.opts.option.label, // ラベル
        forms: self.opts.option.forms, // 生成したいフォームを渡す（schemaと同じ）
        item: item, // 編集したい場合は ここにメニューを渡す
      });

      // 更新
      modal.on('submit', (event) => {
        var item = event.item;
        this.items[index] = item;

        this.update();
      });
      
      // 削除
      modal.on('del', (event) => {
        this.items.splice(index, 1);
      });
    };

    this.getValue = () => {
      return this.items;
    };
atom-input-select-collection
  div.fs12.text-gray.mb8 {opts.option.label}
  label.f.fm.row.cursor-pointer
    div.fs13.border.bg-label.rounded-2.px24.py9.mr4(if='{items.length === 0}') 未選択
    div.fs13.border.bg-label.rounded-2.px24.py9.mr4(each='{item in items}') {item.$get(parent.opts.option.options.key)}
    button.rounded-4.px16.py9.ml16.bg-main.text-white.border-main(onclick='{edit}') 選択
  
  style(type='less').
    :scope {
      .bg-label {
        background-color: #F5F7FA;
      }
    }
  script.
    this.on('mount', async () => {
      this.schema = admin.schemas[opts.option.options.collection];
      this.path = [this.opts.option.options.collection];
      await this.syncItems();
    });

    this.on('update', () => {
      if (this.opts._value && this.items.length === 0) this.syncItems();
    })

    this.syncItems = async () => {
      if (!this.opts._value) {
        this.items = [];
        return ;
      }
      // id からデータ化
      var value = this.opts._value;
      if (!Array.isArray(value)) {
        value = [value];
      }
      var promises = value.map(id => {
        return admin.method.get(this.path, {
          id: id,
        });
      });
      this.items = await Promise.all(promises);
      this.update();
    };

    this.edit = (e) => {
      if (e) e.preventDefault();

      var modal = spat.modal.open('modal-select-collection', {
        label: this.opts.option.label,
        schema: this.schema,
        key: opts.option.options.key,
        multiple: opts.option.multiple,
        items: this.items,
        path: this.path,
      });

      modal.on('submit', ({items}) => {
        this.items = items;
        this.update();
      });
    };

    this.getValue = () => {
      if (this.opts.option.multiple) {
        return this.items.map(i => i.id);
      }
      else {
        return this.items[0] ? this.items[0].id : '';
      }
    };

// datetime picker
atom-input-datetime
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    input.input.w-full(ref='datetimepicker', value='{_value()}' type='text', readonly='{opts.option.readonly}')
  script.
    this.on('mount', () => {
      if (this.opts.option.readonly) return;
      $(this.refs.datetimepicker).datetimepicker({});
    });


    this._value = () => {
      var d = this.opts._value || moment().format('x');
      return moment(d, 'x').format('YYYY/MM/DD HH:mm');
    }

    this.getValue = () => {
      var datetime = moment(this.refs.datetimepicker.value, 'YYYY/MM/DD HH:mm').format('x');
      return +datetime;
    };

atom-input-bool-button
  label
    div.fs12.text-gray.mb8 {opts.option.label}
  div
    button.button(class='{(flag) ? "primary" : ""}', onclick="{toggle}", type='button') {getBoolText(!flag)}

  script.

    this.on('mount', () => {
    })

    this.on('update', () => {
      if (this.flag === undefined && this.opts._value) this.flag = this.opts._value;
    });

    this.getBoolText = function(flag) {
      var options = this.opts.option.options;
      if (options) {
        return (this.flag) ? options[0] : options[1];
      }
      else {
        return this.flag;
      }
    };

    this.getValue = function() { 
      return this.flag;
    };

    this.toggle = function() {
      this.flag = !this.flag;
      this.update();
    };

atom-input-color-picker
  label
    div.fs12.text-gray.mb8 {opts.option.label}
  div.f.fm
    div.w100.h60.rounded-4.cursor-pointer(style='background-color: {getColorHex()}', onclick='{openPicker}')
    div(ref='picker')

  style(type='less').
    :scope {
    }
  script.
    this.on('mount', () => {
      this.picker = Pickr.create({
        el: this.refs.picker,
        theme: 'monolith', // or 'monolith', or 'nano'
        useAsButton: true,
        swatches: [
          'rgba(244, 67, 54, 1)',
          'rgba(233, 30, 99, 1)',
          'rgba(156, 39, 176, 1)',
          'rgba(103, 58, 183, 1)',
          'rgba(63, 81, 181, 1)',
          'rgba(33, 150, 243, 1)',
          'rgba(3, 169, 244, 1)',
          'rgba(0, 188, 212, 1)',
          'rgba(0, 150, 136, 1)',
          'rgba(76, 175, 80, 1)',
          'rgba(139, 195, 74, 1)',
          'rgba(205, 220, 57, 1)',
          'rgba(255, 235, 59, 1)',
          'rgba(255, 193, 7, 1)'
        ],
        components: {
          preview: false,
          opacity: false,
          hue: true,
          interaction: {
            hex: false,
            rgba: false,
            hsla: false,
            hsva: false,
            cmyk: false,
            input: true,
            clear: false,
            save: false,
          },
        },
      });
      this.picker.on('change', (color) => {
        this.color = color.toHEXA().toString();
        this.update();
      });
    });

    this.getColorHex = () => {
      return this.color || this.opts._value || this.opts.option.default;
    };
    
    this.getValue = () => {
      return this.getColorHex();
    };
    
    this.openPicker = () => {
      this.picker.show();
    };

atom-input-button
  button.button(type='button', onclick='{onclick}') {opts.option.label}

  script.
    this.onclick = () => {
      var callback = opts.option.callback;

      // 文字列だったら method の中から探してくる
      if (typeof callback === 'string') {
        callback = admin.method[callback];
      }

      // 関数じゃなかったら何もしない
      if (typeof callback !== 'function') return ;

      callback({
        id: opts._id,
        path: opts.path,
        option: opts.option,
        item: opts.item,
      });
    };
