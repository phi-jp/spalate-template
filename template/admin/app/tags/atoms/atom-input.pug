// テキスト
atom-input-text
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    input.input.w-full(ref='v', type='{opts.item.input_type || "text"}', placeholder='{opts.item.placeholder}', value='{opts._value}', required='{opts.item.required}', readonly='{opts.item.readonly}')

  script.
    this.on('mount', () => {
    });
    this.getValue = () => {
      return this.refs.v.value;
    };

// 数字
atom-input-number
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    input.input.w-full(ref='v', type='number', placeholder='{opts.item.placeholder}', value='{opts._value}', required='{opts.item.required}', readonly='{opts.item.readonly}')

  script.
    this.on('mount', () => {
    });
    this.getValue = () => {
      return this.refs.v.value;
    };

// 複数行テキスト
atom-input-multitext
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    textarea.input.w-full.mb8(ref='v', rows='8') {opts._value}
    //- div.f.fm.fs10.text-weak
    //-   span 文字数：
    //-   span {getWordCount()}
  script.
    this.getValue = () => {
      return this.refs.v.value;
    };

// セレクトメニュー
atom-input-select
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    select.select.border.w-full(ref='select')
      option(each='{option in opts.option.options}', value='{option.value}', selected='{option.value === parent.opts._value}') {option.label}
  script.
    this.on('mount', () => {
    });
    this.getValue = () => {
      return this.refs.select.value;
    };

atom-input-image
  label
    div.fs12.text-gray.mb8 {opts.option.label}
    div(onclick='{click}')
      img(src='{url}')
  
  script.
    this.on('mount', () => {
      this.url = this.opts._value || 'https://dummyimage.com/600x400/000/fff';
      this.update();

      var input = document.createElement('input');
      input.type = 'file';
      input.setAttribute('accept', 'image/*');
      input.onchange = async (e) => {
        var f = e.target.files[0];
        if (!f) return ;

        var base64 = await this.fileToBase64(f);
        this.url = base64;
        this.update();
      };

      this.imageInput = input;
    });

    this.click = () => {
      this.imageInput.click();
    };

    this.upload = async (file) => {
      this.url = await admin.method.upload(file);
      this.update();
    };

    this.getValue = () => {
      return this.url;
    };

    this.fileToBase64 = (file) => {
      return new Promise((resolve) => {
        var fr = new FileReader();
        fr.onload = (e) => {
          resolve(e.target.result);
        };

        fr.readAsDataURL(file);
      })
    };